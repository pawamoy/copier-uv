{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Copier UV","text":"<p>Copier template for Python projects managed by uv.</p> <p>This copier template is mainly for my own usage, but feel free to try it out, or fork it!</p> <p>Similar templates:</p> <ul> <li>copier-pdm, with PDM</li> <li>copier-poetry, with Poetry</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>uv setup, with pre-defined <code>pyproject.toml</code></li> <li>Pre-configured tools for code formatting, quality analysis and testing:   ruff,   mypy,</li> <li>Tests run with pytest and plugins, with coverage support</li> <li>Documentation built with MkDocs   (Material theme   and \"autodoc\" mkdocstrings plugin)</li> <li>Cross-platform tasks with duty</li> <li>Support for GitHub workflows</li> <li>Auto-generated <code>CHANGELOG.md</code> from Git (conventional) commits</li> <li>All licenses from choosealicense.com</li> <li>Support for Insiders versions of projects (e.g. see @pawamoy's insiders)</li> </ul>"},{"location":"#quick-setup-and-usage","title":"Quick setup and usage","text":"<p>Make sure all the requirements are met, then:</p> <pre><code>copier copy --trust \"https://github.com/pawamoy/copier-uv.git\" /path/to/your/new/project\n</code></pre> <p>Or even shorter:</p> <pre><code>copier copy --trust \"gh:pawamoy/copier-uv\" /path/to/your/new/project\n</code></pre> <p>See the documentation for more details.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#161-2025-02-19","title":"1.6.1 - 2025-02-19","text":"<p>Compare with 1.6.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix license choices in template configuration (f26c221 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#160-2025-02-19","title":"1.6.0 - 2025-02-19","text":"<p>Compare with 1.5.7</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Generate /llms.txt docs file (2000ef6 by Timoth\u00e9e Mazzucotelli). Issue-49</li> <li>Add initial API tests (997155b by Timoth\u00e9e Mazzucotelli).</li> <li>Add config to run project, and allow to pass arguments (bd88519 by Timoth\u00e9e Mazzucotelli). Issue-53</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Prevent extension crash with key error (1d27caf by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Prevent publishing insiders packages to PyPI (b51ae0f by Timoth\u00e9e Mazzucotelli). Issue-44</li> <li>Mention <code>insiders</code> instead of <code>pypi-insiders</code> in docs (4c8d09e by Timoth\u00e9e Mazzucotelli). Issue-45</li> <li>Write comments, not docstrings in internal modules/scripts (bedf879 by Timoth\u00e9e Mazzucotelli).</li> <li>Use an \"internal\" layout (fd500cc by Timoth\u00e9e Mazzucotelli). Issue-50</li> <li>Remove Ko-Fi and Paypal from funding file (16f0e0e by Timoth\u00e9e Mazzucotelli). Issue-55</li> <li>Update setup-uv action version (52df1c1 by Timoth\u00e9e Mazzucotelli). Issue-54</li> <li>Enable docs instant preview (link hover) (59b1229 by Timoth\u00e9e Mazzucotelli). Issue-52</li> <li>Rename mkdocstrings-python <code>import</code> option to <code>inventories</code> (c56d1cc by Timoth\u00e9e Mazzucotelli).</li> <li>Enable docs navigation breadcrumbs (15536d7 by Timoth\u00e9e Mazzucotelli).</li> <li>Rename script that generates API reference (db1a856 by Timoth\u00e9e Mazzucotelli).</li> <li>Set metadata title in docs pages (1837a07 by Timoth\u00e9e Mazzucotelli).</li> <li>Update license templating (84537c7 by Timoth\u00e9e Mazzucotelli).</li> <li>Update insiders docs now that we better handle beneficiaries (59bbbb5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#157-2025-01-23","title":"1.5.7 - 2025-01-23","text":"<p>Compare with 1.5.6</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Preserve symlinks (make -&gt; make.py) (dab1219 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Enable Mypy colored output (c6622f8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#156-2024-12-24","title":"1.5.6 - 2024-12-24","text":"<p>Compare with 1.5.5</p>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Fallback onto finding current project version in CHANGELOG.md when Git tags give 0.1 or less (da5df83 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#155-2024-12-23","title":"1.5.5 - 2024-12-23","text":"<p>Compare with 1.5.4</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Ignore constraints on main package (from dependencies), to allow resolving deps in forks/CI (d644679 by Timoth\u00e9e Mazzucotelli). Issue-uv#8148</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Always disable re-sync when using <code>uv run</code> through <code>make</code> (3fe244b by Timoth\u00e9e Mazzucotelli).</li> <li>Remove default PDM settings from pyproject.toml, use default pth-type editable installs (d6ef6f8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#154-2024-11-21","title":"1.5.4 - 2024-11-21","text":"<p>Compare with 1.5.3</p>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Declare dev-deps using PEP 735 (79f05ef by Timoth\u00e9e Mazzucotelli). Issue-42</li> </ul>"},{"location":"changelog/#153-2024-11-11","title":"1.5.3 - 2024-11-11","text":"<p>Compare with 1.5.2</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Don't pass <code>--python python</code> to uv, which requires a <code>python</code> exec in the PATH (331db66 by Timoth\u00e9e Mazzucotelli). Issue-40</li> <li>Make it so that linters see the make script (4989d1e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Improve experience for Windows users (ece7662 by Blair Conrad). PR-33</li> </ul>"},{"location":"changelog/#152-2024-10-17","title":"1.5.2 - 2024-10-17","text":"<p>Compare with 1.5.1</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Also remove Gitpod badge since we removed configuration (65cc91a by Timoth\u00e9e Mazzucotelli).</li> <li>Only add <code>force</code> parameter to docs-deploy duty when insiders is enabled (8df12ae by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#151-2024-10-12","title":"1.5.1 - 2024-10-12","text":"<p>Compare with 1.5.0</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Always fetch the whole Git history, needed to build the current project in non-editable mode with an up-to-date version (f52522e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#150-2024-10-12","title":"1.5.0 - 2024-10-12","text":"<p>Compare with 1.4.8</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Allow forcing docs deployment (b8f0b63 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#148-2024-10-11","title":"1.4.8 - 2024-10-11","text":"<p>Compare with 1.4.7</p>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Enable PyO3 ABI3 forward compatibility when installing deps (c391679 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#147-2024-10-11","title":"1.4.7 - 2024-10-11","text":"<p>Compare with 1.4.6</p>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Drop support for Python 3.8, start testing on Python 3.14 (f24adfe by Timoth\u00e9e Mazzucotelli).</li> <li>Use newest uv features, <code>uv run --no-sync</code> and <code>uv sync --no-editable</code> (ad2ab81 by Timoth\u00e9e Mazzucotelli).</li> <li>More uses of uv in docs (0e3300e by Timoth\u00e9e Mazzucotelli).</li> <li>Remove GitPod configuration (977fe75 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#146-2024-10-07","title":"1.4.6 - 2024-10-07","text":"<p>Compare with 1.4.5</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Use uv to fix pip installs breaking system Python in GHA (b86d3e9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#145-2024-09-27","title":"1.4.5 - 2024-09-27","text":"<p>Compare with 1.4.4</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix make help message indentation (addb51e by Timoth\u00e9e Mazzucotelli).</li> <li>Invalidate uv cache based on pyproject.toml (b78ce88 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#144-2024-09-27","title":"1.4.4 - 2024-09-27","text":"<p>Compare with 1.4.3</p>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Upgrade setup-uv action version (cc2c350 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#143-2024-09-27","title":"1.4.3 - 2024-09-27","text":"<p>Compare with 1.4.2</p>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Upgrade gh-release action version (d26e9fa by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#142-2024-09-27","title":"1.4.2 - 2024-09-27","text":"<p>Compare with 1.4.1</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Better flush help message for make script (fb2d373 by Timoth\u00e9e Mazzucotelli).</li> <li>Better handle <code>gh</code> command error (when fetching \"Documentation\" category ID for discussions) (896dfb3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Update ci and release workflows (4692788 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#141-2024-09-05","title":"1.4.1 - 2024-09-05","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Disallow overrides when getting Git remote in docs-deploy duty (cb0135b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Improve clean command (d4dfab7 by Timoth\u00e9e Mazzucotelli).</li> <li>Enable Git revision date docs plugin, remove Git committers plugin (vendor lock-in, requires GitHub token) (c4907eb by Timoth\u00e9e Mazzucotelli).</li> <li>Don't show source code in docs when insiders (5c57d92 by Timoth\u00e9e Mazzucotelli).</li> <li>Clean up <code>check</code> duty (pre tasks) (2e4dd5b by Timoth\u00e9e Mazzucotelli).</li> <li>Use higher-level uv commands (bf3c328 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2024-07-04","title":"1.4.0 - 2024-07-04","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add feedback system using Giscus (a69ab13 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Rephrase annoucement (bc48d13 by Timoth\u00e9e Mazzucotelli).</li> <li>Add note about lower sponsorships (6a2d804 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#130-2024-06-26","title":"1.3.0 - 2024-06-26","text":"<p>Compare with 1.2.11</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add docs update and change request issue templates (8f41407 by Timoth\u00e9e Mazzucotelli). Issue-27</li> </ul>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix make script to be compatible with Python &lt; 3.10 (795f39f by Timoth\u00e9e Mazzucotelli).</li> <li>Update contributing docs (mention <code>make</code> script instead of Makefile) (7e76e47 by Timoth\u00e9e Mazzucotelli). Issue-28</li> </ul>"},{"location":"changelog/#1211-2024-06-26","title":"1.2.11 - 2024-06-26","text":"<p>Compare with 1.2.10</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Make sure to print errors in case of failure of <code>make</code> command (54696f3 by Timoth\u00e9e Mazzucotelli). Issue-26</li> <li>Make sure <code>setup</code> returns non-0 exit code when uv fails to resolve dependencies (ba5c4dc by Timoth\u00e9e Mazzucotelli).</li> <li>Fix Twine dependency (5.1 has been yanked) (e022917 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1210-2024-06-18","title":"1.2.10 - 2024-06-18","text":"<p>Compare with 1.2.9</p>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>Include almost everything in source distributions, to help system packagers (064ffb0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#129-2024-06-14","title":"1.2.9 - 2024-06-14","text":"<p>Compare with 1.2.8</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Re-include tests folder in source distributions (3d9a7e1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#128-2024-05-24","title":"1.2.8 - 2024-05-24","text":"<p>Compare with 1.2.7</p>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix calling tasks from actual Makefile (30d3bc9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#127-2024-05-23","title":"1.2.7 - 2024-05-23","text":"<p>Compare with 1.2.6</p>"},{"location":"changelog/#code-refactoring_14","title":"Code Refactoring","text":"<ul> <li>Rename <code>cov</code> duty to <code>coverage</code> (keep <code>cov</code> as alias) (0bb541b by Timoth\u00e9e Mazzucotelli).</li> <li>Format make script again, add docstrings and type annotations (e754b45 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#126-2024-05-23","title":"1.2.6 - 2024-05-23","text":"<p>Compare with 1.2.5</p>"},{"location":"changelog/#code-refactoring_15","title":"Code Refactoring","text":"<ul> <li>Reformat make script (734f664 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#125-2024-05-23","title":"1.2.5 - 2024-05-23","text":"<p>Compare with 1.2.4</p>"},{"location":"changelog/#code-refactoring_16","title":"Code Refactoring","text":"<ul> <li>Remove pip self-hosted solution from insiders installation docs (1743f52 by Timoth\u00e9e Mazzucotelli).</li> <li>Rewrite make script in Python (67fcd8b by Timoth\u00e9e Mazzucotelli).</li> <li>Rewrite duties using the new duty \"tools\" (7d5a690 by Timoth\u00e9e Mazzucotelli).</li> <li>Clean up pytest config (1151e7d by Timoth\u00e9e Mazzucotelli).</li> <li>Upgrade minimum versions of dev-deps (b1622e9 by Timoth\u00e9e Mazzucotelli).</li> <li>Remove check-dependencies task for now (618922f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#124-2024-04-26","title":"1.2.4 - 2024-04-26","text":"<p>Compare with 1.2.3</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Super final ultimate fix for publish duty (f888d9f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#123-2024-04-26","title":"1.2.3 - 2024-04-26","text":"<p>Compare with 1.2.2</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Further fixes to release/publish duties (263580a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#122-2024-04-26","title":"1.2.2 - 2024-04-26","text":"<p>Compare with 1.2.1</p>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Don't use modern annotations as duty fails evaluating them on Python 3.8 and 3.9 (4cd01f9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#121-2024-04-26","title":"1.2.1 - 2024-04-26","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Only print available tasks if venvs are setup (0c65bdf by Timoth\u00e9e Mazzucotelli).</li> <li>Fix build and publish duties (27eb549 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2024-04-26","title":"1.2.0 - 2024-04-26","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add <code>build</code> and <code>publish</code> duties (5b4e70a by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing a <code>bump</code> value to the changelog duty (2a1e535 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow passing release version interactively (6839286 by Timoth\u00e9e Mazzucotelli).</li> <li>All <code>allrun</code> and <code>3.x</code> commands to make script (25c7e1b by Timoth\u00e9e Mazzucotelli). Issue-12</li> <li>Run tests with direct dependencies resolved to their lowest version (339e2c6 by Timoth\u00e9e Mazzucotelli). Issue-22</li> </ul>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Don't include current project in credits (77ae955 by Timoth\u00e9e Mazzucotelli). Issue-18</li> <li>Fix parsing options in make scripts (4dbb47c by Timoth\u00e9e Mazzucotelli). Issue-21</li> </ul>"},{"location":"changelog/#code-refactoring_17","title":"Code Refactoring","text":"<ul> <li>Prepare inclusion of manpages when building dists (0a1151c by Timoth\u00e9e Mazzucotelli).</li> <li>Use PEP 440 versioning scheme for changelog (3f3a3c6 by Timoth\u00e9e Mazzucotelli).</li> <li>Transform non Python tasks into make commands (1b29786 by Timoth\u00e9e Mazzucotelli).</li> <li>Sort credits case-insensitively (459caf0 by Timoth\u00e9e Mazzucotelli). Issue-10</li> <li>Improve dev-deps, improve credits script (c199b30 by Timoth\u00e9e Mazzucotelli).</li> <li>Update badges (5dba46f by Timoth\u00e9e Mazzucotelli). Issue-13</li> <li>Use current color for autorefs arrows (f5e8745 by Timoth\u00e9e Mazzucotelli). Issue-19</li> <li>Add front-matter title to auto-generated reference pages (8f33202 by Timoth\u00e9e Mazzucotelli). Issue-20</li> <li>Test on Python 3.13 (e7806d9 by Timoth\u00e9e Mazzucotelli). Issue-23</li> <li>uv is now able to install unnamed projects (647579a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2024-03-19","title":"1.1.0 - 2024-03-19","text":"<p>Compare with 1.0.8</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add Python interpreter path to debug information (9ab5feb by Timoth\u00e9e Mazzucotelli). Issue-1</li> <li>Add Polar to funding file (9e6c75f by Timoth\u00e9e Mazzucotelli). Issue-3</li> </ul>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Fix issues with credits generation (7384022 by Timoth\u00e9e Mazzucotelli). Issue-4</li> <li>Correctly exclude fixtures from Ruff (2dcda18 by Timoth\u00e9e Mazzucotelli). Issue-6</li> </ul>"},{"location":"changelog/#code-refactoring_18","title":"Code Refactoring","text":"<ul> <li>Improve .gitignore and clean duty (0590438 by Timoth\u00e9e Mazzucotelli). Issue-5</li> <li>Handle local/CI installation in <code>make setup</code> (bddbbba by Timoth\u00e9e Mazzucotelli). Issue-8</li> <li>Don't install pip, wheel and setuptools in venvs (e423892 by Timoth\u00e9e Mazzucotelli). Issue-9</li> </ul>"},{"location":"changelog/#108-2024-03-13","title":"1.0.8 - 2024-03-13","text":"<p>Compare with 1.0.7</p>"},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Remove prefix from completed goals HTML ids (3e1d865 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_19","title":"Code Refactoring","text":"<ul> <li>Link to global goal when there are no features (fe6c538 by Timoth\u00e9e Mazzucotelli).</li> <li>Prepare goal names (fe89ca7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#107-2024-03-13","title":"1.0.7 - 2024-03-13","text":"<p>Compare with 1.0.6</p>"},{"location":"changelog/#code-refactoring_20","title":"Code Refactoring","text":"<ul> <li>Update premium sponsors display (aabb40a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#106-2024-03-02","title":"1.0.6 - 2024-03-02","text":"<p>Compare with 1.0.5</p>"},{"location":"changelog/#code-refactoring_21","title":"Code Refactoring","text":"<ul> <li>Improve Insiders features paragraph (8179314 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#105-2024-02-29","title":"1.0.5 - 2024-02-29","text":"<p>Compare with 1.0.4</p>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Fix view/edit URIs in docs (8fdf5dd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#104-2024-02-28","title":"1.0.4 - 2024-02-28","text":"<p>Compare with 1.0.3</p>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>I AM SO ANNOYED BY THIS OS (2c5beb4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix dependencies installation in CI (af33aab by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#103-2024-02-28","title":"1.0.3 - 2024-02-28","text":"<p>Compare with 1.0.2</p>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Fix parsing options now that the script exits on errors (c800738 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#102-2024-02-28","title":"1.0.2 - 2024-02-28","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Fix uv install and credits again (7ce4e3b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#101-2024-02-28","title":"1.0.1 - 2024-02-28","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Fix credits generation, preventing dev-deps to appear as runtime ones (dfa6ed4 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix re-installation of deps (ace356a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_22","title":"Code Refactoring","text":"<ul> <li>Update Ruff config file (71713de by Timoth\u00e9e Mazzucotelli).</li> <li>Clean up config files (a9d58ac by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2024-02-19","title":"1.0.0 - 2024-02-19","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Make it work with uv (469fc45 by Timoth\u00e9e Mazzucotelli).</li> <li>Fork from Copier PDM v1.2.3</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at dev@pawamoy.fr. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>You only need two tools, uv and Copier.</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\nuv tool install copier --with copier-templates-extensions\n</code></pre> <p>Then you can clone the repository, enter it and set it up with:</p> <pre><code>git clone https://github.com/pawamoy/copier-uv\ncd copier-uv\nmake setup\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running tests","text":"<p>To run the tests, use:</p> <pre><code>make test\n</code></pre>"},{"location":"contributing/#serving-docs","title":"Serving docs","text":"<p>To serve the docs locally, use:</p> <pre><code>make docs\n</code></pre>"},{"location":"generate/","title":"Generating a project","text":"<p>To generate a project, run the following command:</p> <pre><code>copier copy --trust \"https://github.com/pawamoy/copier-uv.git\" /path/to/your/new/project\n</code></pre> <p>Or with a shorter command:</p> <pre><code>copier copy --trust \"gh:pawamoy/copier-uv\" /path/to/your/new/project\n</code></pre> <p>You can even generate a project without installing Copier, using uv:</p> <pre><code>uvx --with copier-templates-extensions copier copy --trust \"gh:pawamoy/copier-uv\" /path/to/your/new/project\n</code></pre>"},{"location":"generate/#questions","title":"Questions","text":"<p>The following examples are not up-to-date, they simply illustrate how the template works.</p> <p>Copier will ask you to answer some questions:</p> <pre><code>Your project name\nproject_name? Format: str\n\ud83c\udfa4 [None]: My Project\n</code></pre> <p>The project name can use spaces and capitals. It will be used as the main heading in the README for example.</p> <pre><code>Your project description\nproject_description? Format: str\n\ud83c\udfa4 [None]: My super project!\n</code></pre> <p>The project description can be as long as you want, and use any character you want.</p> <pre><code>Your full name\nauthor_fullname? Format: str\n\ud83c\udfa4 [None]: Timoth\u00e9e Mazzucotelli\n</code></pre> <p>The full name will appear as \"author\" in the project's metadata.</p> <pre><code>Your email\nauthor_email? Format: str\n\ud83c\udfa4 [None]: dev@pawamoy.fr\n</code></pre> <p>The email will appear as \"author email\" in the project's metadata.</p> <pre><code>Your username (e.g. on GitHub)\nauthor_username? Format: str\n\ud83c\udfa4 [None]: pawamoy\n</code></pre> <p>The username you are using on the git repository provider.</p> <pre><code>Your repository provider\nrepository_provider? Format: str\n\ud83c\udfa4\n(1) github.com\nChoice [1]: \n</code></pre> <p>The repository provider on which you plan to store your project. This template only supports GitHub, but the question is left in case we add support for more providers in the future.</p> <pre><code>Your repository namespace\nrepository_namespace? Format: str\n\ud83c\udfa4 [pawamoy]: \n</code></pre> <p>The namespace (or account) on which the project will be stored. It defaults to the username you provided.</p> <pre><code>Your repository name\nrepository_name? Format: str\n\ud83c\udfa4 [my-project]: \n</code></pre> <p>The repository name on the selected provider. It defaults to a slugified version of your project's name.</p> <pre><code>The name of the person/entity holding the copyright\ncopyright_holder? Format: str\n\ud83c\udfa4 [Timoth\u00e9e Mazzucotelli]: \n</code></pre> <p>The name of the person or entity holding the copyright on the project. It defaults to the full name your provided.</p> <pre><code>The email of the person/entity holding the copyright\ncopyright_holder_email? Format: str\n\ud83c\udfa4 [dev@pawamoy.frr]: \n</code></pre> <p>The email of the person or entity holding the copyright on the project. It defaults to the email your provided.</p> <pre><code>The copyright date\ncopyright_date? Format: str\n\ud83c\udfa4 [2021]: \n</code></pre> <p>The date to apply to the copyright. It defaults to the current year.</p> <pre><code>Your project's license\ncopyright_license? Format: str\n\ud83c\udfa4\n(1) Academic Free License v3.0\n(2) Apache License 2.0\n(3) Artistic License 2.0\n(4) BSD 2-Clause \"Simplified\" License\n(5) BSD 3-Clause Clear License\n(6) BSD 3-Clause \"New\" or \"Revised\" License\n(7) Boost Software License 1.0\n(8) Creative Commons Attribution 4.0\n(9) Creative Commons Attribution Share Alike 4.0\n(10) Creative Commons Zero v1.0 Universal\n(11) Do What The F*ck You Want To Public License\n(12) Educational Community License v2.0\n(13) Eclipse Public License 1.0\n(14) Eclipse Public License 2.0\n(15) European Union Public License 1.1\n(16) European Union Public License 1.2\n(17) GNU Affero General Public License v3.0\n(18) GNU General Public License v2.0\n(19) GNU General Public License v3.0\n(20) GNU Lesser General Public License v2.1\n(21) GNU Lesser General Public License v3.0\n(22) ISC License\n(23) LaTeX Project Public License v1.3c\n(24) MIT License\n(25) Mozilla Public License 2.0\n(26) Microsoft Public License\n(27) Microsoft Reciprocal License\n(28) University of Illinois/NCSA Open Source License\n(29) SIL Open Font License 1.1\n(30) Open Software License 3.0\n(31) PostgreSQL License\n(32) The Unlicense\n(33) zlib License\nChoice [22]: \n</code></pre> <p>A license from choosealicence.com. It defaults to ISC License (my personal preference).</p> <pre><code>Your Python package distribution name (for `pip install NAME`)\npython_package_distribution_name? Format: str\n\ud83c\udfa4 [my-project]: \n</code></pre> <p>The name under which your Python package will be distributed. This will be the name of your project on pypi.org for example.</p> <pre><code>Your Python package import name (for `import NAME` in Python code)\npython_package_import_name? Format: str\n\ud83c\udfa4 [my_project]: \n</code></pre> <p>The name that will be used to import your package in Python code. Yes, distribution name and import name can be different!</p> <pre><code>Your CLI name if any (for use in the shell)\npython_package_command_line_name? Format: str\n\ud83c\udfa4 [my-project]: \n</code></pre> <p>The name of the command users will type in the command line to run your program.</p>"},{"location":"generate/#output","title":"Output","text":"<p>At this point, Copier will generate the project in the specified directory:</p> <pre><code>    create  pyproject.toml\n    create  mkdocs.yml\n    create  duties.py\n    create  .copier-answers.yml\n    create  README.md\n    create  Makefile\n    create  LICENSE\n    create  CREDITS.md\n    create  CONTRIBUTING.md\n    create  CODE_OF_CONDUCT.md\n    create  CHANGELOG.md\n    create  .gitignore\n    create  tests/\n    create  tests/test_cli.py\n    create  tests/conftest.py\n    create  tests/__init__.py\n    create  src/\n    create  src/my_project/\n    create  src/my_project/cli.py\n    create  src/my_project/__main__.py\n    create  src/my_project/__init__.py\n    create  scripts/\n    create  scripts/setup.sh\n    create  scripts/post_generation.py\n    create  scripts/multirun.sh\n    create  docs/\n    create  docs/index.md\n    create  docs/credits.md\n    create  docs/contributing.md\n    create  docs/code_of_conduct.md\n    create  docs/changelog.md\n    create  docs/reference/\n    create  docs/reference/cli.md\n    create  docs/css/\n    create  docs/css/mkdocstrings.css\n    create  config/\n    create  config/pytest.ini\n    create  config/mypy.ini\n    create  config/coverage.ini\n    create  .github/\n    create  .github/FUNDING.yml\n    create  .github/workflows/\n    create  .github/workflows/ci.yml\n    create  .github/ISSUE_TEMPLATE/\n    create  .github/ISSUE_TEMPLATE/feature_request.md\n    create  .github/ISSUE_TEMPLATE/bug_report.md\n\n &gt; Running task 1 of 1: python scripts/post_generation.py\nProject successfully generated!\nRun `make` to show the available actions.\n</code></pre> <p>See the next chapter to learn how to work on this new project.</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2019, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"requirements/","title":"Requirements","text":"<p>To use this Copier template, you will need:</p> <ul> <li>Git v2</li> <li>Python 3</li> <li>Copier</li> </ul> <p>To install Git version 2, follow the official instructions.</p> <p>To install Python 3, download and install it from the official website, or install it with uv:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\nuv python install 3.12\n</code></pre> <p>To install Copier, use <code>uv</code> or <code>pipx</code>:</p> <pre><code>uv tool install copier --with copier-templates-extensions\n</code></pre> <pre><code>pipx install copier\npipx inject copier copier-templates-extensions\n</code></pre>"},{"location":"update/","title":"Updating a project","text":"<p>Copier has an \"update\" feature. It means that, once a project is generated, you can keep updating it with the latest changes that happen in the template.</p> <p>It's particularly useful when you manage a lot of projects, all generated from the same template, and you want to apply a change to all your projects.</p> <p>Example: the template fixed a bug in the Makefile. You don't want to apply it manually to your projects.</p> <p>To update your project, go into its directory, and run <code>copier update</code>. Your repository must be clean (no modified files) when running this command.</p> <p>Copier will use the previous answers you gave when generating the project, to re-generate it in a temporary directory, compare the two versions, and apply patches to your documents. When it's not sure, or when there's a conflict, it will ask you if you want to skip that change or force it. Your previous answers are stored in the <code>.copier-answers.yml</code> file at the root of the project directory:</p> <pre><code>\ud83d\udcc1 my-project\n\u251c\u2500\u2500 \ud83d\udcc4 .copier-answers.yml\n\u2514\u2500\u2500 \ud83d\udcc4 etc.\n</code></pre> <p>And the file looks like this:</p> <pre><code># Changes here will be overwritten by Copier\n_commit: 0.1.10\n_src_path: gh:pawamoy/copier-uv\nauthor_email: dev@pawamoy.fr\nauthor_fullname: \"Timoth\u00e9e Mazzucotelli\"\nauthor_username: pawamoy\ncopyright_date: '2020'\ncopyright_holder: \"Timoth\u00e9e Mazzucotelli\"\ncopyright_holder_email: dev@pawamoy.fr\ncopyright_license: ISC License\nproject_description: Automatic documentation from sources, for MkDocs.\nproject_name: mkdocstrings\npython_package_command_line_name: \"\"\npython_package_distribution_name: mkdocstrings\npython_package_import_name: mkdocstrings\nrepository_name: mkdocstrings\nrepository_namespace: mkdocstrings\nrepository_provider: github.com\n</code></pre> <p>If you want to use all previous answers without copier prompting you for each answer, run <code>copier update --force</code>.</p> <p>Since we are generally using Git in our projects, my recommendation is to not think at all and blindly apply every change Copier proposes. Indeed, you'll be able to see the diff with <code>git diff</code>, un-apply changes on whole files with <code>git checkout -- FILE</code> if they are not relevant, or do partial, interactive commits with <code>git add -p</code> or within your IDE interface (PyCharm and VSCode have good support and UX for selecting and committing changes).</p>"},{"location":"work/","title":"Working on a project","text":"<p>The generated project has this structure:</p> <pre><code>\ud83d\udcc1 your_project ------------------- # your freshly created project!\n\u251c\u2500\u2500 \ud83d\udcc4 CHANGELOG.md --------------- # \n\u251c\u2500\u2500 \ud83d\udcc4 CODE_OF_CONDUCT.md --------- # \n\u251c\u2500\u2500 \ud83d\udcc1 config --------------------- # tools configuration files\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 coverage.ini ----------- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 mypy.ini --------------- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 pytest.ini ------------- # \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 ruff.toml -------------- # \n\u251c\u2500\u2500 \ud83d\udcc4 CONTRIBUTING.md ------------ # \n\u251c\u2500\u2500 \ud83d\udcc1 docs ----------------------- # documentation pages\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 changelog.md ----------- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 code_of_conduct.md ----- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 contributing.md -------- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 credits.md ------------- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 css -------------------- # extra CSS files\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 material.css ------- # \n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 mkdocstrings.css --- # \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 index.md --------------- # \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 license.md ------------- # \n\u251c\u2500\u2500 \ud83d\udcc4 duties.py ------------------ # the project's tasks\n\u251c\u2500\u2500 \ud83d\udcc4 LICENSE -------------------- # \n\u251c\u2500\u2500 \ud83d\udcc4 Makefile ------------------- # for auto-completion (it calls scripts/make)\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml ----------------- # docs configuration\n\u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml ------------- # project metadata and dependencies\n\u251c\u2500\u2500 \ud83d\udcc4 README.md ------------------ # \n\u251c\u2500\u2500 \ud83d\udcc1 scripts -------------------- # helper scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 gen_credits.py --------- # script to generate credits\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 gen_ref_nav.py --------- # script to generate code reference nav\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 make ------------------- # a convenience script to run tasks\n\u251c\u2500\u2500 \ud83d\udcc1 src ------------------------ # the source code directory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc1 your_package ----------- # your package\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 cli.py ------------- # the command line entry point\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 __init__.py -------- # \n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udcc4 __main__.py -------- # \n\u2502\u00a0\u00a0     \u2514\u2500\u2500 \ud83d\udcc4 py.typed ----------- # \n\u2514\u2500\u2500 \ud83d\udcc1 tests ---------------------- # the tests directory\n    \u251c\u2500\u2500 \ud83d\udcc4 conftest.py ------------ # pytest fixtures, etc.\n    \u251c\u2500\u2500 \ud83d\udcc4 __init__.py ------------ # \n    \u2514\u2500\u2500 \ud83d\udcc4 test_cli.py ------------ # \n</code></pre>"},{"location":"work/#environment","title":"Environment","text":"<p>The project is configured to use direnv. If direnv is loaded in your shell, allow it in the project with <code>direnv allow</code>. It will add the <code>scripts</code> folder to your PATH when you enter the repository (and remove it when you exit it). The <code>scripts</code> folder has a <code>make</code> Bash script in it: it will shadow any <code>make</code> command you have in your PATH (this is indented!).</p> <p>If you don't have or don't use direnv, you can still use the official <code>make</code> command, though you won't be able to pass arguments to some of the actions.</p> <p>In the rest of the documentation, we will use <code>make</code> commands, but you can also directly call <code>scripts/make</code>.</p> <p>See Tasks to learn more.</p>"},{"location":"work/#python-versions","title":"Python versions","text":"<p>To specify which Python versions you would like to work with, define the <code>PYTHON_VERSIONS</code> environment variable:</p> <pre><code>export PYTHON_VERSIONS=\"3.10 3.11 3.12\"\n</code></pre> <p>By default it is set to active versions of Python (non-EOL, in development).</p>"},{"location":"work/#initialize-git-repository","title":"Initialize Git Repository","text":"<p>This project uses dynamic versioning based on Git tags. Initialize your project as a Git repository:</p> <pre><code>git init .\n</code></pre>"},{"location":"work/#dependencies-and-virtual-environments","title":"Dependencies and virtual environments","text":"<p>Dependencies are managed by uv.</p> <p>Use <code>make setup</code> or <code>uv sync</code> to install the dependencies.</p> <p>Dependencies are written in <code>pyproject.toml</code>. Runtime dependencies are listed under the <code>[project]</code> and <code>[project.optional-dependencies]</code> sections, and development dependencies are listed under the <code>[tool.uv]</code> section.</p> <p>Example:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n  \"fastapi&gt;=1.0\",\n  \"importlib-metadata&gt;=2.0\",\n]\n\n[project.optional-dependencies]\ntest = [\n  \"pytest\",\n]\n\n[tool.uv]\ndev-dependencies = [\n  \"ruff\",\n]\n</code></pre>"},{"location":"work/#tasks","title":"Tasks","text":"<p>The tasks are written in Python (for cross-platform compatibility), and based on the task-runner called duty. They are written in the <code>duties.py</code> file, and decorated with the <code>@duty</code> decorator.</p> <p>Example:</p> duties.py<pre><code>@duty\ndef check_docs(ctx):\n    \"\"\"Check if the documentation builds correctly.\"\"\"\n    ctx.run(\"mkdocs build -s\", title=\"Building documentation\")\n</code></pre> <p>To run a task, use <code>make TASK [ARG=VALUE...]</code>. You can run multiple tasks at once: <code>make TASK1 ARG=VALUE TASK2</code>. You can list the available tasks with <code>make help</code>.</p> <p>Available tasks:</p> <ul> <li><code>build</code>: Build source and wheel distributions.</li> <li><code>changelog</code>: Update the changelog in-place with latest commits.   See the Changelog section.</li> <li><code>check</code>: Check it all!   See the Quality Analysis section.</li> <li><code>check-quality</code>: Check the code quality.   See the check-quality section.</li> <li><code>check-docs</code>: Check if the documentation builds correctly.   See the check-docs section.</li> <li><code>check-types</code>: Check that the code is correctly typed.   See the check-types section.</li> <li><code>clean</code>: Delete temporary files.</li> <li><code>coverage</code>: Report coverage as text and HTML.</li> <li><code>docs</code>: Serve the documentation (localhost:8000).   See the Documentation section.   Arguments:<ul> <li><code>host=\"127.0.0.1\"</code>: The host to serve the docs from.</li> <li><code>port=8000</code>: The port to serve the docs on.</li> </ul> </li> <li><code>format</code>: Run formatting tools on the code.</li> <li><code>publish</code>: Publish source and wheel distributions to PyPI.</li> <li><code>release</code>: Release a new Python package.   See the Releases section.   Arguments:<ul> <li><code>version</code> The Python package version.</li> </ul> </li> <li><code>test</code>: Run the test suite.   See the Tests section.   Arguments:<ul> <li><code>match=\"\"</code>: A pytest expression to filter selected tests.</li> </ul> </li> <li><code>vscode</code>: Configure VSCode for the project.   See VSCode setup.</li> </ul> <p>The <code>make</code> script provides some additional commands:</p> <ul> <li><code>make help</code>: Print available commands and tasks.</li> <li><code>make setup</code>: Install project and dependencies for all configured Python versions,   as well as in a default virtual environment (<code>.venv</code> + <code>.venvs/*</code>).</li> <li><code>make run command --args</code>: run arbitrary commands in the default Python virtual environment (<code>.venv</code>).   This command can be useful to run a Python interpreter without having to activate the venv:   <code>make run python</code>.</li> <li><code>make multirun command --args</code>: run arbitrary commands for all configured Python versions (<code>.venvs/*</code>).   This command can be useful to check something on all Python versions:   <code>make multirun python -c 'import sys; print(sys.version_info)'</code>.</li> <li><code>make allrun command --args</code>: run arbitrary commands in all Python virtual environments (<code>.venv</code> + <code>.venvs/*</code>).   This command can be useful to override some of the installed dependencies,   or to install local packages as editable:   <code>make allrun pip install -U some-dependency==2.0</code>, <code>make allrun pip install -e ../some-project</code>.</li> <li><code>make 3.x command --args</code>: run arbitrary commands for a specific Python versions (<code>.venvs/3.x</code>).   This command can be useful to check something on a specific Python version:   <code>make 3.13 duty docs</code>.</li> </ul>"},{"location":"work/#vscode-setup","title":"VSCode setup","text":"<p>If you work in VSCode, we provide a <code>make vscode</code> action that configures settings and tasks. It will overwrite the following existing files, so make sure to back them up:</p> <ul> <li><code>.vscode/launch.json</code></li> <li><code>.vscode/settings.json</code></li> <li><code>.vscode/tasks.json</code></li> </ul>"},{"location":"work/#workflow","title":"Workflow","text":"<p>The first thing you should run when entering your repository is:</p> <pre><code>make setup\n</code></pre> <p>If you don't have the <code>make</code> command, you can use <code>scripts/make setup</code> directly, or even just <code>uv venv; uv pip install</code> if you don't plan on using multiple Python versions.</p> <p>This will install the project's dependencies in virtual environments: one venv per chosen Python version in <code>.venvs/$python_version</code>, and one default venv in <code>.venv/</code>.</p> <p>The chosen Python versions are defined in the <code>scripts/make</code> Bash script.</p> <p>Now you can start writing and editing code in <code>src/your_package</code>.</p> <ul> <li>You can auto-format the code with <code>make format</code>.</li> <li>You can run a quality analysis with <code>make check</code>.</li> <li>Once you wrote tests for your new code,   you can run the test suite with <code>make test</code>.</li> <li>Once you are ready to publish a new release,   run <code>make changelog</code>, then <code>make release version=x.y.z</code>,   where <code>x.y.z</code> is the version added to the changelog.</li> </ul> <p>To summarize, the typical workflow is:</p> <pre><code>make setup  # only once\n\n&lt;write code&gt;\nmake format  # to auto-format the code\n\n&lt;write tests&gt;\nmake test  # to run the test suite\n\nmake check  # to check if everything is OK\n\n&lt;commit your changes&gt;\n\nmake changelog  # to update the changelog\n&lt;edit changelog if needed&gt;\n\nmake release version=x.y.z\n</code></pre>"},{"location":"work/#quality-analysis","title":"Quality analysis","text":"<p>The quality checks are started with:</p> <pre><code>make check\n</code></pre> <p>This action is actually a composition of several checks:</p> <ul> <li><code>check-quality</code>: Check the code quality.</li> <li><code>check-docs</code>: Check if the documentation builds correctly.</li> <li><code>check-types</code>: Check if the code is correctly typed.</li> <li><code>check-api</code>: Check for breaking changes in your Python API.</li> </ul> <p>For example, if you are only interested in checking types, run <code>make check-types</code>.</p>"},{"location":"work/#check-quality","title":"check-quality","text":"<p>The code quality analysis is done with Ruff. The analysis is configured in <code>config/ruff.toml</code>. In this file, you can deactivate rules or activate others to customize your analysis. Rules identifiers always start with one or more capital letters, like <code>D</code>, <code>S</code> or <code>BLK</code>, then followed by a number.</p> <p>You can ignore a rule on a specific code line by appending a <code>noqa</code> comment (\"no quality analysis/assurance\"):</p> src/your_package/module.py<pre><code>print(\"a code line that triggers a Ruff warning\")  # noqa: ID\n</code></pre> <p>...where ID is the identifier of the rule you want to ignore for this line.</p> <p>Example:</p> src/your_package/module.py<pre><code>import subprocess\n</code></pre> <pre><code>$ make check-quality\n\u2717 Checking code quality (1)\n  &gt; ruff check --config=config/ruff.toml src/ tests/ scripts/\n  src/your_package/module.py:2:1: S404 Consider possible security implications associated with subprocess module.\n</code></pre> <p>Now add a comment to ignore this warning.</p> src/your_package/module.py<pre><code>import subprocess  # noqa: S404\n</code></pre> <pre><code>$ make check-quality\n\u2713 Checking code quality\n</code></pre> <p>You can disable multiple different warnings on a single line by separating them with commas:</p> src/your_package/module.py<pre><code>markdown_docstring = \"\"\"\n    Look at this docstring:\n\n    ```python\n    \\\"\\\"\\\"\n    print(\"code block\")\n    \\\"\\\"\\\"\n    ```\n\"\"\"  # noqa: D300,D301\n</code></pre> <p>You can disable a warning globally by adding its ID into the list in <code>config/ruff.toml</code>.</p> <p>You can also disable warnings per file, like so:</p> config/ruff.toml<pre><code>[per-file-ignores]\n\"src/your_package/your_module.py\" = [\n    \"T201\",  # Print statement\n]\n</code></pre>"},{"location":"work/#check-docs","title":"check-docs","text":"<p>This action builds the documentation with strict behavior: any warning will be considered an error and the command will fail.</p> <p>The warnings/errors can be about incorrect docstring format, or invalid cross-references.</p> <p>See the Documentation section for more information.</p>"},{"location":"work/#check-types","title":"check-types","text":"<p>This action runs <code>mypy</code> on the source code to find potential typing errors.</p> <p>If you cannot or don't know how to fix a typing error in your code, as a last resort you can ignore this specific error with a comment:</p> src/your_package/module.py<pre><code>result = data_dict.get(key, None).value  # type: ignore[ID]\n</code></pre> <p>...where ID is the name of the warning, for example <code>arg-type</code> or <code>union-attr</code>.</p>"},{"location":"work/#check-api","title":"check-api","text":"<p>This actions runs Griffe to search for API breaking changes since latest version. It is set to allow failures, and is more about providing information than preventing CI to pass.</p>"},{"location":"work/#tests","title":"Tests","text":"<p>Run the test suite with:</p> <pre><code>make test\n</code></pre> <p>Behind the scenes, it uses <code>pytest</code> and plugins to collect and run the tests, and output a report.</p> <p>Code source coverage is computed thanks to coveragepy.</p> <p>Sometimes you don't want to run the whole test suite, but rather one particular test, or group of tests. Pytest provides a <code>-k</code> option to allow filtering the tests. The <code>test</code> command therefore accept a <code>match=</code> argument to specify the value of Pytest's <code>-k</code> option:</p> <pre><code>make test match=training\nmake test match=\"app and route2\"\n</code></pre> <p>Example of output:</p> <pre><code>Test session starts (platform: linux, Python 3.8.6, pytest 6.2.1, pytest-sugar 0.9.4)\nUsing --randomly-seed=281943462\nrootdir: /home/pawamoy/data/dev/pawamoy/duty, configfile: config/pytest.ini\nplugins: randomly-3.5.0, xdist-2.2.0, forked-1.3.0, cov-2.10.1, sugar-0.9.4\ncollecting ... \n tests/test_logic.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713                                          15% \u2588\u258b        \n tests/test_cli.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 86% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b \n                   \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713                                            100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n----------- coverage: platform linux, python 3.8.6-final-0 -----------\nName                Stmts   Miss Branch BrPart     Cover\n--------------------------------------------------------\nsrc/duty/cli.py        62      0     20      0   100.00%\nsrc/duty/logic.py      71      0     18      0   100.00%\n--------------------------------------------------------\nTOTAL                 133      0     38      0   100.00%\n\n\nResults (0.76s):\n      78 passed\n</code></pre>"},{"location":"work/#continuous-integration","title":"Continuous Integration","text":"<p>The quality checks and tests are executed in parallel in a GitHub Workflow. The CI is configured in <code>.github/workflows/ci.yml</code>.</p> <p>To force a step to pass even when it fails, add <code>nofail=CI</code> or <code>nofail=True</code> to the corresponding <code>ctx.run</code> instruction in <code>duties.py</code></p>"},{"location":"work/#changelog","title":"Changelog","text":"<p>Changelogs are absolutely useful when your software is updated regularly, to inform your users about the new features that were added or the bugs that were fixed.</p> <p>But writing a changelog manually is a cumbersome process.</p> <p>This is why we offer, with this template, a way to automatically update the changelog. There is one requirement though for it to work: you must use the Angular commit message convention.</p> <p>For a quick reference:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes which are not features nor bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>The two most important are <code>feat</code> and <code>fix</code> types. For other types of commits, you can do as you like.</p> <p>Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end:</p> <pre><code>Body.\n\nReferences: #10, #11.\nFixes #15.\n</code></pre> <p>Examples:</p> <pre><code>feat: Add training route\n</code></pre> <pre><code>fix: Stop deleting user data\n</code></pre> <p>Following that convention will allow to generate new entries in the changelog while following the rules of semantic versioning.</p> <p>Once you are ready to publish a new release of your package, run the following command:</p> <pre><code>make changelog\n</code></pre> <p>This will update the changelog in-place, using the latest, unpublished-yet commits.</p> <p>If this group of commits contains only bug fixes (<code>fix:</code>) and/or commits that are not interesting for users (<code>chore:</code>, <code>style:</code>, etc.), the changelog will gain a new patch entry. It means that the new suggested version will be a patch bump of the previous one: <code>0.1.1</code> becomes <code>0.1.2</code>.</p> <p>If this group of commits contains at least one feature (<code>feat:</code>), the changelog will gain a new minor entry. It means that the new suggested version will be a minor bump of the previous one: <code>0.1.1</code> becomes <code>0.2.0</code>.</p> <p>If there is, in this group, a commit whose body contains something like <code>Breaking change</code>, the changelog will gain a new major entry, unless the version is still an \"alpha\" version (starting with 0), in which case it gains a minor entry. It means that the new suggested version will be a major bump of the previous one: <code>1.2.1</code> becomes <code>2.0.0</code>, but <code>0.2.1</code> is only bumped up to <code>0.3.0</code>. Moving from \"alpha\" status to \"beta\" or \"stable\" status is a choice left to the developers, when they consider the package is ready for it.</p> <p>Finally, once your changelog has been updated, make sure its contents are correct (add, remove or edit anything you need), and use the new version (the one that was added into the changelog) to create a new release:</p> <pre><code>make release version=x.y.z\n</code></pre> <p>...where x.y.z is the version added in the changelog.</p>"},{"location":"work/#releases","title":"Releases","text":"<p>As seen in the previous section, you can use the <code>release</code> command to publish new versions of the Python package.</p> <p>Usually, just before running <code>make release version=x.y.z</code>, you run <code>make changelog</code> to update the changelog and use the newly added version as the argument to <code>make release</code>.</p> <p>For example, if after running <code>make changelog</code>, the diff shows a new <code>0.5.1</code> entry in the changelog, you must release this exact same version with <code>make release version=0.5.1</code>.</p> <p>The <code>release</code> action does several things, in this order:</p> <ul> <li>Stage the changelog file (<code>CHANGELOG.md</code>)</li> <li>Commit the changes with a message like <code>chore: Prepare release 0.5.1</code></li> <li>Tag the commit with that version</li> <li>Push the commits</li> <li>Push the tags</li> <li>Build the package dist and wheel</li> <li>Publish the dist and wheel to PyPI.org</li> <li>Build and deploy the documentation site</li> </ul>"},{"location":"work/#documentation","title":"Documentation","text":"<p>The documentation is built with Mkdocs, the Material for Mkdocs theme, and the mkdocstrings plugin.</p>"},{"location":"work/#writing","title":"Writing","text":"<p>The pages are written in Markdown, and thanks to <code>mkdocstrings</code>, even your Python docstrings can be written in Markdown. <code>mkdocstrings</code> particularly supports the Google-style for docstrings.</p> <p>The documentation configuration is written into <code>mkdocs.yml</code>, at the root of the project. The Markdown pages are written in the <code>docs/</code> directory. You can use any level of nesting you want. The left-sidebar navigation is configured through the <code>nav</code> key in <code>mkdocs.yml</code>.</p> <p>For example, with these docs structure:</p> <pre><code>\ud83d\udcc1 docs\n\u251c\u2500\u2500 \ud83d\udcc4 changelog.md\n\u251c\u2500\u2500 \ud83d\udcc4 index.md\n\u2514\u2500\u2500 \ud83d\udcc1 reference\n    \u251c\u2500\u2500 \ud83d\udcc4 cli.md\n    \u2514\u2500\u2500 \ud83d\udcc4 logic.md\n</code></pre> <p>...you can have these navigation items in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>nav:\n- Overview: index.md\n- Code Reference:\n  - cli.py: reference/cli.md\n  - logic.py: reference/logic.md\n- Changelog: changelog.md\n</code></pre> <p>Note that we matched the sections in the navigation with the folder tree, but that is not mandatory.</p> <p><code>mkdocstrings</code> allows you to inject documentation of Python objects in Markdown pages with the following syntax:</p> <pre><code>::: path.to.object\n    OPTIONS\n</code></pre> <p>...where <code>OPTIONS</code> is a YAML block containing configuration options for both the selection of Python objects and their rendering.</p> <p>You can document an entire module or even package with a single instruction:</p> <pre><code>::: your_package\n</code></pre> <p>...but it's usually better to have each module injected in a separate page.</p> <p>For more information about <code>mkdocstrings</code>, check its documentation.</p>"},{"location":"work/#serving","title":"Serving","text":"<p>MkDocs provides a development server with files watching and live-reload. Run <code>make docs</code> to serve your documentation on <code>localhost:8000</code>.</p> <p>If you run it in a remote host (Linux VM) and would like to access it from your local browser, bind the server to 0.0.0.0 instead:</p> <pre><code>make docs host=0.0.0.0\n</code></pre> <p>If needed, you can also change the port used:</p> <pre><code>make docs host=0.0.0.0 port=5000\n</code></pre>"},{"location":"work/#deploying","title":"Deploying","text":"<p>MkDocs has a <code>gh-deploy</code> command that will deploy you documentation on GitHub pages. We make use of this command in the <code>docs-deploy</code> action:</p> <pre><code>make docs-deploy\n</code></pre> <p>If you'd prefer to deploy on ReadTheDocs instead, you will likely have to write a <code>readthedocs.yml</code> configuration file and enable the project on ReadTheDocs.</p>"}]}